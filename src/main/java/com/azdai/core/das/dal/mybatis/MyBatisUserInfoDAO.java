/**
 * obullxl@gmail.com
 */
package com.azdai.core.das.dal.mybatis;

import com.azdai.core.das.dal.dao.UserInfoDAO;

import java.util.Map;
import java.util.List;
import com.azdai.core.das.dal.query.UserInfoQuery;
import com.azdai.core.das.dal.dto.UserInfoDTO;
import org.springframework.dao.DataAccessException;
import java.util.HashMap;


import com.github.obullxl.lang.Profiler;

/**
 * A mybatis based implementation of DAO interface <tt>com.azdai.core.das.dal.dao.UserInfoDAO</tt>.
 *
 * Generated by <tt>atom-dalgen</tt>.
 *
 * @author obullxl@gmail.com
 */
public class MyBatisUserInfoDAO extends org.mybatis.spring.support.SqlSessionDaoSupport implements UserInfoDAO {


	/**
	 *  Insert one <tt>UserInfoDTO</tt> object to DB table <tt>azdai_user_info</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into azdai_user_info(no,nick_name,state,sex,login_state,email_state,mobile_state,passwd,passwd_err_count,regist_date,active_date,auth_date,mobile,email,real_name,avatar,birth_date,post_code,province_code,city_code,county_code,street_info,gmt_create,gmt_modify) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param userInfo
	 *	@return String
	 *	@throws DataAccessException
	 */	 
    public String insert(UserInfoDTO userInfo) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-USER-INFO.insert");
	try {
    	if (userInfo == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	

        this.getSqlSession().insert("AZDAI-USER-INFO.insert", userInfo);

        return userInfo.getNo();
	} finally {
		Profiler.release();
	}
}

	/**
	 *  Update DB table <tt>azdai_user_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update azdai_user_info set state=?, sex=?, login_state=?, email_state=?, mobile_state=?, passwd=?, passwd_err_count=?, regist_date=?, active_date=?, auth_date=?, mobile=?, email=?, real_name=?, avatar=?, birth_date=?, post_code=?, province_code=?, city_code=?, county_code=?, street_info=?, gmt_modify='NOW' where (no = ?)</tt>
	 *
	 *	@param userInfo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(UserInfoDTO userInfo) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-USER-INFO.update");
	try {
    	if (userInfo == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return this.getSqlSession().update("AZDAI-USER-INFO.update", userInfo);
	} finally {
		Profiler.release();
	}
}
	/**
	 *  Update DB table <tt>azdai_user_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update azdai_user_info set passwd='PWD', gmt_modify='NOW' where (no = 'NO')</tt>
	 *
	 *	@param no
	 *	@param passwd
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updatePassword(String no, String passwd) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-USER-INFO.updatePassword");
	try {
        Map<String, Object> param = new HashMap<String, Object>();

        param.put("no", no);
        param.put("passwd", passwd);

        return this.getSqlSession().update("AZDAI-USER-INFO.updatePassword", param);
	} finally {
		Profiler.release();
	}
}
	/**
	 *  Update DB table <tt>azdai_user_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update azdai_user_info set passwd_err_count='PEC', gmt_modify='NOW' where (no = 'NO')</tt>
	 *
	 *	@param no
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int increasePasswdErrCount(String no) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-USER-INFO.increasePasswdErrCount");
	try {

        return this.getSqlSession().update("AZDAI-USER-INFO.increasePasswdErrCount", no);
	} finally {
		Profiler.release();
	}
}
	/**
	 *  Update DB table <tt>azdai_user_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update azdai_user_info set passwd_err_count='PEC', gmt_modify='NOW' where (no = 'NO')</tt>
	 *
	 *	@param no
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int clearPasswdErrCount(String no) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-USER-INFO.clearPasswdErrCount");
	try {

        return this.getSqlSession().update("AZDAI-USER-INFO.clearPasswdErrCount", no);
	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_user_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_user_info where (no = ?)</tt>
	 *
	 *	@param no
	 *	@return UserInfoDTO
	 *	@throws DataAccessException
	 */	 
    public UserInfoDTO findByNo(String no) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-USER-INFO.findByNo");
	try {

        return this.getSqlSession().selectOne("AZDAI-USER-INFO.findByNo", no);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_user_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_user_info where ((nick_name = 'LN') OR (email = 'EM') OR (mobile = 'MB'))</tt>
	 *
	 *	@param name
	 *	@return UserInfoDTO
	 *	@throws DataAccessException
	 */	 
    public UserInfoDTO findByLoginName(String name) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-USER-INFO.findByLoginName");
	try {

        return this.getSqlSession().selectOne("AZDAI-USER-INFO.findByLoginName", name);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_user_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_user_info where (email = ?)</tt>
	 *
	 *	@param email
	 *	@return UserInfoDTO
	 *	@throws DataAccessException
	 */	 
    public UserInfoDTO findByEmail(String email) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-USER-INFO.findByEmail");
	try {

        return this.getSqlSession().selectOne("AZDAI-USER-INFO.findByEmail", email);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_user_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_user_info where (nick_name = ?)</tt>
	 *
	 *	@param nickName
	 *	@return UserInfoDTO
	 *	@throws DataAccessException
	 */	 
    public UserInfoDTO findByNickName(String nickName) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-USER-INFO.findByNickName");
	try {

        return this.getSqlSession().selectOne("AZDAI-USER-INFO.findByNickName", nickName);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_user_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_user_info order by no ASC</tt>
	 *
	 *	@return List<UserInfoDTO>
	 *	@throws DataAccessException
	 */	 
    public List<UserInfoDTO> findAll() throws DataAccessException{
	Profiler.enter("DAO: AZDAI-USER-INFO.findAll");
	try {

        return this.getSqlSession().selectList("AZDAI-USER-INFO.findAll", null);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_user_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_user_info where (no = 'FUZZY')</tt>
	 *
	 *	@param args
	 *	@return List<UserInfoDTO>
	 *	@throws DataAccessException
	 */	 
    public List<UserInfoDTO> findFuzzy(UserInfoQuery args) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-USER-INFO.findFuzzy");
	try {

        return this.getSqlSession().selectList("AZDAI-USER-INFO.findFuzzy", args);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_user_info</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from azdai_user_info where (no = 'FUZZY')</tt>
	 *
	 *	@param args
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findFuzzyCount(UserInfoQuery args) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-USER-INFO.findFuzzyCount");
	try {

	    Long retObj = (Long) this.getSqlSession().selectOne("AZDAI-USER-INFO.findFuzzyCount", args);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Delete records from DB table <tt>azdai_user_info</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from azdai_user_info where (no = ?)</tt>
	 *
	 *	@param no
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int delete(String no) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-USER-INFO.delete");
	try {

        return this.getSqlSession().delete("AZDAI-USER-INFO.delete", no);
	} finally {
		Profiler.release();
	}
}
}
