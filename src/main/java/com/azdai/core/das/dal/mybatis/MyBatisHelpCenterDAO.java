/**
 * obullxl@gmail.com
 */
package com.azdai.core.das.dal.mybatis;

import com.azdai.core.das.dal.dao.HelpCenterDAO;

import java.util.Map;
import java.util.List;
import com.azdai.core.das.dal.dto.HelpCenterDTO;
import org.springframework.dao.DataAccessException;
import java.util.HashMap;


import com.github.obullxl.ticket.TicketService;
import com.github.obullxl.ticket.api.TicketException;
import com.github.obullxl.lang.Profiler;

/**
 * A mybatis based implementation of DAO interface <tt>com.azdai.core.das.dal.dao.HelpCenterDAO</tt>.
 *
 * Generated by <tt>atom-dalgen</tt> on Thu Mar 20 14:41:56 CST 2014.
 *
 * @author obullxl@gmail.com
 */
public class MyBatisHelpCenterDAO extends org.mybatis.spring.support.SqlSessionDaoSupport implements HelpCenterDAO {
	/** TicketID */
	private TicketService ticketService;
	
	public void setTicketService(TicketService ticketService) {
		this.ticketService = ticketService;
	}
	
	public TicketService getTicketService() {
        return ticketService;
    }


	/**
	 *  Insert one <tt>HelpCenterDTO</tt> object to DB table <tt>azdai_help_center</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into azdai_help_center(id,catg,show_flag,sort,accept_count,reject_count,title,content,gmt_create,gmt_modify) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param helpCenter
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(HelpCenterDTO helpCenter) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-HELP-CENTER.insert");
	try {
    	if (helpCenter == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        try {
            helpCenter.setId(this.ticketService.nextValue());
        } catch (TicketException e) {
            throw new RuntimeException("Set PrimaryKey exception.", e);
        }

        this.getSqlSession().insert("AZDAI-HELP-CENTER.insert", helpCenter);

        return helpCenter.getId();
	} finally {
		Profiler.release();
	}
}

	/**
	 *  Update DB table <tt>azdai_help_center</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update azdai_help_center set catg=?, show_flag=?, sort=?, title=?, content=?, gmt_modify='NOW' where (id = ?)</tt>
	 *
	 *	@param helpCenter
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(HelpCenterDTO helpCenter) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-HELP-CENTER.update");
	try {
    	if (helpCenter == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return this.getSqlSession().update("AZDAI-HELP-CENTER.update", helpCenter);
	} finally {
		Profiler.release();
	}
}
	/**
	 *  Update DB table <tt>azdai_help_center</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update azdai_help_center set catg=?, show_flag=?, sort=?, gmt_modify='NOW' where (id = ?)</tt>
	 *
	 *	@param helpCenter
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateMeta(HelpCenterDTO helpCenter) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-HELP-CENTER.updateMeta");
	try {
    	if (helpCenter == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return this.getSqlSession().update("AZDAI-HELP-CENTER.updateMeta", helpCenter);
	} finally {
		Profiler.release();
	}
}
	/**
	 *  Update DB table <tt>azdai_help_center</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update azdai_help_center set title=?, content=?, gmt_modify='NOW' where (id = ?)</tt>
	 *
	 *	@param helpCenter
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateContent(HelpCenterDTO helpCenter) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-HELP-CENTER.updateContent");
	try {
    	if (helpCenter == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return this.getSqlSession().update("AZDAI-HELP-CENTER.updateContent", helpCenter);
	} finally {
		Profiler.release();
	}
}
	/**
	 *  Update DB table <tt>azdai_help_center</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update azdai_help_center set accept_count='AC', gmt_modify='NOW' where (id = 'ID')</tt>
	 *
	 *	@param id
	 *	@param delta
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateAcceptCount(long id, int delta) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-HELP-CENTER.updateAcceptCount");
	try {
        Map<String, Object> param = new HashMap<String, Object>();

        param.put("id", new Long(id));
        param.put("delta", new Integer(delta));

        return this.getSqlSession().update("AZDAI-HELP-CENTER.updateAcceptCount", param);
	} finally {
		Profiler.release();
	}
}
	/**
	 *  Update DB table <tt>azdai_help_center</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update azdai_help_center set reject_count='AC', gmt_modify='NOW' where (id = 'ID')</tt>
	 *
	 *	@param id
	 *	@param delta
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateRejectCount(long id, int delta) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-HELP-CENTER.updateRejectCount");
	try {
        Map<String, Object> param = new HashMap<String, Object>();

        param.put("id", new Long(id));
        param.put("delta", new Integer(delta));

        return this.getSqlSession().update("AZDAI-HELP-CENTER.updateRejectCount", param);
	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_help_center</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_help_center where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return HelpCenterDTO
	 *	@throws DataAccessException
	 */	 
    public HelpCenterDTO find(long id) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-HELP-CENTER.find");
	try {
        Long param = new Long(id);

        return this.getSqlSession().selectOne("AZDAI-HELP-CENTER.find", param);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_help_center</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_help_center where (show_flag = 'SHOW')</tt>
	 *
	 *	@param showFlag
	 *	@return List<HelpCenterDTO>
	 *	@throws DataAccessException
	 */	 
    public List<HelpCenterDTO> findByShow(String showFlag) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-HELP-CENTER.findByShow");
	try {

        return this.getSqlSession().selectList("AZDAI-HELP-CENTER.findByShow", showFlag);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_help_center</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_help_center where (catg = 'CATG')</tt>
	 *
	 *	@param catg
	 *	@return List<HelpCenterDTO>
	 *	@throws DataAccessException
	 */	 
    public List<HelpCenterDTO> findByCatg(long catg) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-HELP-CENTER.findByCatg");
	try {
        Long param = new Long(catg);

        return this.getSqlSession().selectList("AZDAI-HELP-CENTER.findByCatg", param);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_help_center</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_help_center order by sort ASC</tt>
	 *
	 *	@return List<HelpCenterDTO>
	 *	@throws DataAccessException
	 */	 
    public List<HelpCenterDTO> findAll() throws DataAccessException{
	Profiler.enter("DAO: AZDAI-HELP-CENTER.findAll");
	try {

        return this.getSqlSession().selectList("AZDAI-HELP-CENTER.findAll", null);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Delete records from DB table <tt>azdai_help_center</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from azdai_help_center where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int delete(long id) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-HELP-CENTER.delete");
	try {
        Long param = new Long(id);

        return this.getSqlSession().delete("AZDAI-HELP-CENTER.delete", param);
	} finally {
		Profiler.release();
	}
}
}
