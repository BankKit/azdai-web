/**
 * obullxl@gmail.com
 */
package com.azdai.core.das.dal.mybatis;

import com.azdai.core.das.dal.dao.RoleRightDAO;

import java.util.Map;
import java.util.List;
import com.azdai.core.das.dal.dto.RoleRightDTO;
import org.springframework.dao.DataAccessException;
import java.util.HashMap;


import com.github.obullxl.ticket.TicketService;
import com.github.obullxl.ticket.api.TicketException;
import com.github.obullxl.lang.Profiler;

/**
 * A mybatis based implementation of DAO interface <tt>com.azdai.core.das.dal.dao.RoleRightDAO</tt>.
 *
 * Generated by <tt>atom-dalgen</tt> on Thu Mar 20 14:41:56 CST 2014.
 *
 * @author obullxl@gmail.com
 */
public class MyBatisRoleRightDAO extends org.mybatis.spring.support.SqlSessionDaoSupport implements RoleRightDAO {
	/** TicketID */
	private TicketService ticketService;
	
	public void setTicketService(TicketService ticketService) {
		this.ticketService = ticketService;
	}
	
	public TicketService getTicketService() {
        return ticketService;
    }


	/**
	 *  Insert one <tt>RoleRightDTO</tt> object to DB table <tt>azdai_role_right</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into azdai_role_right(role_id,rgt_code,gmt_create,gmt_modify) values (?, ?, ?, ?)</tt>
	 *
	 *	@param roleRight
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(RoleRightDTO roleRight) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-ROLE-RIGHT.insert");
	try {
    	if (roleRight == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        try {
            roleRight.setRoleId(this.ticketService.nextValue());
        } catch (TicketException e) {
            throw new RuntimeException("Set PrimaryKey exception.", e);
        }

        this.getSqlSession().insert("AZDAI-ROLE-RIGHT.insert", roleRight);

        return roleRight.getRoleId();
	} finally {
		Profiler.release();
	}
}

	/**
	 *  Query DB table <tt>azdai_role_right</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_role_right where ((role_id = ?) AND (rgt_code = ?))</tt>
	 *
	 *	@param roleId
	 *	@param rgtCode
	 *	@return RoleRightDTO
	 *	@throws DataAccessException
	 */	 
    public RoleRightDTO find(long roleId, String rgtCode) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-ROLE-RIGHT.find");
	try {
        Map<String, Object> param = new HashMap<String, Object>();

        param.put("roleId", new Long(roleId));
        param.put("rgtCode", rgtCode);

        return this.getSqlSession().selectOne("AZDAI-ROLE-RIGHT.find", param);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_role_right</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_role_right where (role_id = ?) order by rgt_code ASC</tt>
	 *
	 *	@param roleId
	 *	@return List<RoleRightDTO>
	 *	@throws DataAccessException
	 */	 
    public List<RoleRightDTO> findByRole(long roleId) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-ROLE-RIGHT.findByRole");
	try {
        Long param = new Long(roleId);

        return this.getSqlSession().selectList("AZDAI-ROLE-RIGHT.findByRole", param);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_role_right</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_role_right where (rgt_code = ?) order by role_id ASC</tt>
	 *
	 *	@param rgtCode
	 *	@return List<RoleRightDTO>
	 *	@throws DataAccessException
	 */	 
    public List<RoleRightDTO> findByRight(String rgtCode) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-ROLE-RIGHT.findByRight");
	try {

        return this.getSqlSession().selectList("AZDAI-ROLE-RIGHT.findByRight", rgtCode);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_role_right</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_role_right order by role_id ASC, rgt_code ASC</tt>
	 *
	 *	@return List<RoleRightDTO>
	 *	@throws DataAccessException
	 */	 
    public List<RoleRightDTO> findAll() throws DataAccessException{
	Profiler.enter("DAO: AZDAI-ROLE-RIGHT.findAll");
	try {

        return this.getSqlSession().selectList("AZDAI-ROLE-RIGHT.findAll", null);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Delete records from DB table <tt>azdai_role_right</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from azdai_role_right where ((role_id = ?) AND (rgt_code = ?))</tt>
	 *
	 *	@param roleId
	 *	@param rgtCode
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int delete(long roleId, String rgtCode) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-ROLE-RIGHT.delete");
	try {
        Map<String, Object> param = new HashMap<String, Object>();

        param.put("roleId", new Long(roleId));
        param.put("rgtCode", rgtCode);

        return this.getSqlSession().delete("AZDAI-ROLE-RIGHT.delete", param);
	} finally {
		Profiler.release();
	}
}
	/**
	 *  Delete records from DB table <tt>azdai_role_right</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from azdai_role_right where (role_id = ?)</tt>
	 *
	 *	@param roleId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByRole(long roleId) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-ROLE-RIGHT.deleteByRole");
	try {
        Long param = new Long(roleId);

        return this.getSqlSession().delete("AZDAI-ROLE-RIGHT.deleteByRole", param);
	} finally {
		Profiler.release();
	}
}
	/**
	 *  Delete records from DB table <tt>azdai_role_right</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from azdai_role_right where (rgt_code = ?)</tt>
	 *
	 *	@param rgtCode
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByRight(String rgtCode) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-ROLE-RIGHT.deleteByRight");
	try {

        return this.getSqlSession().delete("AZDAI-ROLE-RIGHT.deleteByRight", rgtCode);
	} finally {
		Profiler.release();
	}
}
}
