/**
 * obullxl@gmail.com
 */
package com.azdai.core.das.dal.mybatis;

import com.azdai.core.das.dal.dao.UserRoleDAO;

import java.util.Map;
import java.util.List;
import com.azdai.core.das.dal.dto.UserRoleDTO;
import org.springframework.dao.DataAccessException;
import java.util.HashMap;


import com.github.obullxl.lang.Profiler;

/**
 * A mybatis based implementation of DAO interface <tt>com.azdai.core.das.dal.dao.UserRoleDAO</tt>.
 *
 * Generated by <tt>atom-dalgen</tt> on Fri Mar 28 12:36:19 CST 2014.
 *
 * @author obullxl@gmail.com
 */
public class MyBatisUserRoleDAO extends org.mybatis.spring.support.SqlSessionDaoSupport implements UserRoleDAO {


	/**
	 *  Insert one <tt>UserRoleDTO</tt> object to DB table <tt>azdai_user_role</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into azdai_user_role(user_no,nick_name,role_id,gmt_create,gmt_modify) values (?, ?, ?, ?, ?)</tt>
	 *
	 *	@param userRole
	 *	@return String
	 *	@throws DataAccessException
	 */	 
    public String insert(UserRoleDTO userRole) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-USER-ROLE.insert");
	try {
    	if (userRole == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	

        this.getSqlSession().insert("AZDAI-USER-ROLE.insert", userRole);

        return userRole.getUserNo();
	} finally {
		Profiler.release();
	}
}

	/**
	 *  Query DB table <tt>azdai_user_role</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_user_role where ((user_no = ?) AND (role_id = ?))</tt>
	 *
	 *	@param userNo
	 *	@param roleId
	 *	@return UserRoleDTO
	 *	@throws DataAccessException
	 */	 
    public UserRoleDTO find(String userNo, long roleId) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-USER-ROLE.find");
	try {
        Map<String, Object> param = new HashMap<String, Object>();

        param.put("userNo", userNo);
        param.put("roleId", new Long(roleId));

        return this.getSqlSession().selectOne("AZDAI-USER-ROLE.find", param);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_user_role</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_user_role where (user_no = ?) order by role_id ASC</tt>
	 *
	 *	@param userNo
	 *	@return List<UserRoleDTO>
	 *	@throws DataAccessException
	 */	 
    public List<UserRoleDTO> findByUser(String userNo) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-USER-ROLE.findByUser");
	try {

        return this.getSqlSession().selectList("AZDAI-USER-ROLE.findByUser", userNo);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_user_role</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_user_role where (role_id = ?) order by user_no ASC</tt>
	 *
	 *	@param roleId
	 *	@return List<UserRoleDTO>
	 *	@throws DataAccessException
	 */	 
    public List<UserRoleDTO> findByRole(long roleId) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-USER-ROLE.findByRole");
	try {
        Long param = new Long(roleId);

        return this.getSqlSession().selectList("AZDAI-USER-ROLE.findByRole", param);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Delete records from DB table <tt>azdai_user_role</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from azdai_user_role where ((user_no = ?) AND (role_id = ?))</tt>
	 *
	 *	@param userNo
	 *	@param roleId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int delete(String userNo, long roleId) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-USER-ROLE.delete");
	try {
        Map<String, Object> param = new HashMap<String, Object>();

        param.put("userNo", userNo);
        param.put("roleId", new Long(roleId));

        return this.getSqlSession().delete("AZDAI-USER-ROLE.delete", param);
	} finally {
		Profiler.release();
	}
}
	/**
	 *  Delete records from DB table <tt>azdai_user_role</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from azdai_user_role where (user_no = ?)</tt>
	 *
	 *	@param userNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByUser(String userNo) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-USER-ROLE.deleteByUser");
	try {

        return this.getSqlSession().delete("AZDAI-USER-ROLE.deleteByUser", userNo);
	} finally {
		Profiler.release();
	}
}
	/**
	 *  Delete records from DB table <tt>azdai_user_role</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from azdai_user_role where (role_id = ?)</tt>
	 *
	 *	@param roleId
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByRole(long roleId) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-USER-ROLE.deleteByRole");
	try {
        Long param = new Long(roleId);

        return this.getSqlSession().delete("AZDAI-USER-ROLE.deleteByRole", param);
	} finally {
		Profiler.release();
	}
}
}
