/**
 * obullxl@gmail.com
 */
package com.azdai.core.das.dal.mybatis;

import com.azdai.core.das.dal.dao.UploadFileDAO;

import java.util.List;
import org.springframework.dao.DataAccessException;
import com.azdai.core.das.dal.dto.UploadFileDTO;
import com.azdai.core.das.dal.query.UploadFileQuery;


import com.github.obullxl.ticket.TicketService;
import com.github.obullxl.ticket.api.TicketException;
import com.github.obullxl.lang.Profiler;

/**
 * A mybatis based implementation of DAO interface <tt>com.azdai.core.das.dal.dao.UploadFileDAO</tt>.
 *
 * Generated by <tt>atom-dalgen</tt>.
 *
 * @author obullxl@gmail.com
 */
public class MyBatisUploadFileDAO extends org.mybatis.spring.support.SqlSessionDaoSupport implements UploadFileDAO {
	/** TicketID */
	private TicketService ticketService;
	
	public void setTicketService(TicketService ticketService) {
		this.ticketService = ticketService;
	}
	
	public TicketService getTicketService() {
        return ticketService;
    }


	/**
	 *  Insert one <tt>UploadFileDTO</tt> object to DB table <tt>azdai_upload_file</tt>, return primary key
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>insert into azdai_upload_file(id,user_no,nick_name,catg,file_type,title,length,path,name,ext,src_name,memo,gmt_create,gmt_modify) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)</tt>
	 *
	 *	@param uploadFile
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long insert(UploadFileDTO uploadFile) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-UPLOAD-FILE.insert");
	try {
    	if (uploadFile == null) {
    		throw new IllegalArgumentException("Can't insert a null data object into db.");
    	}
    	
        try {
            uploadFile.setId(this.ticketService.nextValue());
        } catch (TicketException e) {
            throw new RuntimeException("Set PrimaryKey exception.", e);
        }

        this.getSqlSession().insert("AZDAI-UPLOAD-FILE.insert", uploadFile);

        return uploadFile.getId();
	} finally {
		Profiler.release();
	}
}

	/**
	 *  Update DB table <tt>azdai_upload_file</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update azdai_upload_file set catg=?, file_type=?, title=?, path=?, name=?, ext=?, src_name=?, memo=?, gmt_modify='NOW' where (id = ?)</tt>
	 *
	 *	@param uploadFile
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int update(UploadFileDTO uploadFile) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-UPLOAD-FILE.update");
	try {
    	if (uploadFile == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return this.getSqlSession().update("AZDAI-UPLOAD-FILE.update", uploadFile);
	} finally {
		Profiler.release();
	}
}
	/**
	 *  Update DB table <tt>azdai_upload_file</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>update azdai_upload_file set name=?, gmt_modify='NOW' where (id = ?)</tt>
	 *
	 *	@param uploadFile
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int updateName(UploadFileDTO uploadFile) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-UPLOAD-FILE.updateName");
	try {
    	if (uploadFile == null) {
    		throw new IllegalArgumentException("Can't update by a null data object.");
    	}


        return this.getSqlSession().update("AZDAI-UPLOAD-FILE.updateName", uploadFile);
	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_upload_file</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_upload_file where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return UploadFileDTO
	 *	@throws DataAccessException
	 */	 
    public UploadFileDTO find(long id) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-UPLOAD-FILE.find");
	try {
        Long param = new Long(id);

        return this.getSqlSession().selectOne("AZDAI-UPLOAD-FILE.find", param);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_upload_file</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_upload_file where (user_no = ?) order by gmt_create DESC</tt>
	 *
	 *	@param userNo
	 *	@return List<UploadFileDTO>
	 *	@throws DataAccessException
	 */	 
    public List<UploadFileDTO> findByUser(String userNo) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-UPLOAD-FILE.findByUser");
	try {

        return this.getSqlSession().selectList("AZDAI-UPLOAD-FILE.findByUser", userNo);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_upload_file</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_upload_file where (catg = ?) order by gmt_create DESC</tt>
	 *
	 *	@param catg
	 *	@return List<UploadFileDTO>
	 *	@throws DataAccessException
	 */	 
    public List<UploadFileDTO> findByCatg(String catg) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-UPLOAD-FILE.findByCatg");
	try {

        return this.getSqlSession().selectList("AZDAI-UPLOAD-FILE.findByCatg", catg);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_upload_file</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_upload_file where (file_type = ?) order by gmt_create DESC</tt>
	 *
	 *	@param fileType
	 *	@return List<UploadFileDTO>
	 *	@throws DataAccessException
	 */	 
    public List<UploadFileDTO> findByFileType(String fileType) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-UPLOAD-FILE.findByFileType");
	try {

        return this.getSqlSession().selectList("AZDAI-UPLOAD-FILE.findByFileType", fileType);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_upload_file</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select * from azdai_upload_file where (id = 'FUZZY')</tt>
	 *
	 *	@param args
	 *	@return List<UploadFileDTO>
	 *	@throws DataAccessException
	 */	 
    public List<UploadFileDTO> findFuzzy(UploadFileQuery args) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-UPLOAD-FILE.findFuzzy");
	try {

        return this.getSqlSession().selectList("AZDAI-UPLOAD-FILE.findFuzzy", args);

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Query DB table <tt>azdai_upload_file</tt> for records.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>select COUNT(*) from azdai_upload_file where (id = 'FUZZY')</tt>
	 *
	 *	@param args
	 *	@return long
	 *	@throws DataAccessException
	 */	 
    public long findFuzzyCount(UploadFileQuery args) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-UPLOAD-FILE.findFuzzyCount");
	try {

	    Long retObj = (Long) this.getSqlSession().selectOne("AZDAI-UPLOAD-FILE.findFuzzyCount", args);

		if (retObj == null) {
		    return 0;
		} else {
		    return retObj.longValue();
		}

	} finally {
		Profiler.release();
	}
}
	/**
	 *  Delete records from DB table <tt>azdai_upload_file</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from azdai_upload_file where (id = ?)</tt>
	 *
	 *	@param id
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int delete(long id) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-UPLOAD-FILE.delete");
	try {
        Long param = new Long(id);

        return this.getSqlSession().delete("AZDAI-UPLOAD-FILE.delete", param);
	} finally {
		Profiler.release();
	}
}
	/**
	 *  Delete records from DB table <tt>azdai_upload_file</tt>.
	 *
	 *  <p>
	 *  The sql statement for this operation is <br>
	 *  <tt>delete from azdai_upload_file where (user_no = ?)</tt>
	 *
	 *	@param userNo
	 *	@return int
	 *	@throws DataAccessException
	 */	 
    public int deleteByUser(String userNo) throws DataAccessException{
	Profiler.enter("DAO: AZDAI-UPLOAD-FILE.deleteByUser");
	try {

        return this.getSqlSession().delete("AZDAI-UPLOAD-FILE.deleteByUser", userNo);
	} finally {
		Profiler.release();
	}
}
}
